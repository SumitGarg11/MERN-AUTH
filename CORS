What is CORS?
Imagine you have a website, let's call it Website A. This website is hosted at www.website-a.com.
Now, let's say Website A wants to fetch some data from another website, called Website B, which is hosted at www.website-b.com.

Normally, web browsers have a security feature called the Same-Origin Policy. 
This policy means that a website can only make requests to its own domain 
(i.e., www.website-a.com can only request data from www.website-a.com). It’s like a rule that says, "You can only talk to yourself."

But what if Website A needs to get data from Website B? That’s where CORS comes in.


How Does CORS Work?
CORS is like a permission slip that Website B gives to Website A, allowing it to access its resources. Here’s how it works in a simple way:

Website A (www.website-a.com) makes a request to Website B (www.website-b.com) to get some data.

Before Website B sends the data, the browser sends a small request (called a preflight request) to check if Website B allows cross-origin requests from Website A.

Website B responds with some special headers (like Access-Control-Allow-Origin) that say, "Yes, Website A is allowed to get this data."

If the permission is granted, the browser allows the data from Website B to be shared with Website A.

Simple Example:
Scenario:

You have a weather website (Website A) that shows the weather in different cities.
The weather data comes from another website's API (Website B).
Without CORS:

If your weather website tries to get data from the API, the browser would block the request because it’s trying to get data from a different domain.
With CORS:

The API (Website B) has CORS enabled, so it allows your weather website to access its data. It’s like the API saying, "Sure, you can use my data, I trust you."
